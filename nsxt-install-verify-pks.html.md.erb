---
title: Verify Enterprise PKS Installation on vSphere with NSX-T
owner: PKS-NSXT
---

<strong><%= modified_date %></strong>

This topic provides general instructions for verifying the installation of an NSX&#x2011;T VM, either an NSX&#x2011;T 
Manager VM or an NSX&#x2011;T Edge Node VM, that you have deployed for use with Enterprise PKS.

##<a id='om-login'></a> Log In to Ops Manager

To verify the installation of an NSX&#x2011;T Manager or Edge Node VM, complete the following steps:

1. SSH to the Ops Manager VM.

For information about creating an SSH key pair, see 
[Generate an SSH key pair for installing Ops Manager v2.6 on vSphere](https://community.pivotal.io/s/article/generate-an-ssh-key-pair-for-installing-ops-manager-v2-6-on-vsphere) 
in the Pivotal knowledge base or 
[How to generate an SSH key pair for installing Ops Manager v2.6 on vSphere (71143)](https://kb.vmware.com/s/article/71143) 
in the VMware support knowledge base.

##<a id='cli-install'></a> Install the PKS and Kubectl CLIs

You will manage your environment using the Pivotal Container Service Command Line Interface (PKS CLI) and 
the Kubernetes CLI (kubectl). Complete the following steps to deploy the PKS and Kubernetes CLIs.  

1. To copy CLIs to your Ops Manager using SCP (PSCP in this case), run the following commands:  

    ```
    pscp c:\temp\pks-linux-amd64-PKS-VERSION ubuntu@IP-ADDRESS:/home/ubuntu/pks
    pscp c:\temp\kubectl-linux-amd64-STEMCELL-VERSION ubuntu@IP-ADDRESS:/home/ubuntu/pks
    ```

    Where:
    * `PKS-VERSION` is your PKS build ID.  
    * `STEMCELL-VERSION` is your stemcell version ID. 
    * `IP-ADDRESS` is the IP Address for Ops Manager host.   
  
    For example:
    <pre class="terminal">
    $ pscp c:\temp\pks\pks-linux-amd64-1.5.0-build.291 ubuntu@10.197.79.152:/home/ubuntu/pks
    $ pscp c:\temp\pks\kubectl-linux-amd64-1.14.5 ubuntu@10.197.79.152:/home/ubuntu/pks
    </pre>

1. To make the CLIs executable, run the following command:  

    ```
    chmod +x pks-linux-amd64-VERSION
    chmod +x kubectl-linux-amd64-VERSION
    ```

    Where:
    * `PKS-VERSION` is your PKS build ID.  
    * `STEMCELL-VERSION` is your stemcell version ID. 

    For example:
    <pre class="terminal">
    $ chmod +x pks-linux-amd64-1.5.0-build.291
    $ chmod +x kubectl-linux-amd64-1.14.5
    </pre>

1. To rename and move the files to your PATH, run the following commands:  

    ```
    sudo mv pks-linux-amd64-VERSION /usr/local/bin/pks
    sudo mv kubectl-linux-amd64-VERSION /usr/local/bin/kubectl
    ```

    Where:
    * `PKS-VERSION` is your PKS build ID.  
    * `STEMCELL-VERSION` is your stemcell version ID. 

    For example:
    <pre class="terminal">
    $ sudo mv pks-linux-amd64-1.5.0-build.291 /usr/local/bin/pks
    $ sudo mv kubectl-linux-amd64-1.14.5 /usr/local/bin/kubectl
    </pre>

##<a id='uaac-install'></a> Install UAAC and Configure UAA

1. To install UAAC, run the following commands:  

    ```
    cd /usr/local/bin
    sudo apt -y install ruby ruby-dev gcc build-essential g++
    sudo gem install cf-uaac
    ```

1. To verify installation, run the following command:  

    ```
    uaac -v
    ```

1. To add PKS API hostname and IP address to a DNS server, complete the following steps:  
    1. Get the PKS API Hostname from the PKS tile > PKS API module.
    1. Get the IP address from vSphere.
    1. Add the IP address and the PKS API Hostname to the /etc/hosts file.

    For example:
    <pre class="terminal">
    $ vi /etc/hosts

    127.0.0.1 localhost
    ...
    10.0.0.7 api.pks.vsphere.local
    </pre>

1. To target PKS using UAAC, run the following command:  

    ```
    uaac target https://PKS-HOSTNAME:8443 --skip-ssl-validation
    ```

1. To fetch the UAA admin token, run the following commands:  

    1. Retrieve the token from Ops Manager: PKS Tile > Credentials > Pks Uaa Management Admin Client.  
    1. Click on Link to Credential, copy the secret value.  
    1. To set the UAA target, run the following command:  

        ```
        uaac target https://api.comet.pks.local:8443 --skip-ssl-validation
        ```

    1. To apply the token to UAA, run the following command:  

        ```
        uaac token client get admin -s SECRET
        ```

        Where `SECRET` is the secret copied in the preceding step.
  
    For example:
    
    <pre class="terminal">
    $ uaac target https://api.comet.pks.local:8443 --skip-ssl-validation
    Unknown key: Max-Age = 86400

    Target: https://api.comet.pks.local:8443

    $ uaac token client get admin -s syMZA-FUlvdEXgXrgI-SDmkUVuP5rlzA
    Unknown key: Max-Age = 86400

    Successfully fetched token via client credentials grant.
    Target: https://api.comet.pks.local:8443
    Context: admin, from client admin
    </pre>

##<a id='users-add'></a> Add PKS Users to UAA 

1. To add the PKS Admin user to UAA, run the following commands:

    ```
    uaac user add pks-admin --emails ADMIN-EMAIL-ADDRESS -p PASSWORD
    uaac member add pks.clusters.admin pks-admin

    ```

    Where:
    * `ADMIN-EMAIL-ADDRESS` is the email address for the admin user account.  
    * `PASSWORD` is the password for the user account.  

    For example:
    <pre class="terminal">
    $ uaac user add pks-admin --emails pks-admin@example.com -p aZ1by2cX3d4!
    user account successfully added 

    $ uaac member add pks.clusters.admin pks-admin
    success
    </pre>

1. To add the PKS Manage user to UAA, run the following commands:  

    ```
    uaac user add k8s-admin --emails MANAGE-EMAIL-ADDRESS -p PASSWORD
    uaac member add pks.clusters.manage k8s-admin
    ```

    Where:
    * `MANAGE-EMAIL-ADDRESS` is the email address for the PKS Manage user account.  
    * `PASSWORD` is the password for the user account. 

    For example:  
    <pre class="terminal">
    $ uaac user add k8s-admin --emails k8s-admin@example.com -p aZ1by2cX3d4!
    user account successfully added
    
    $ uaac member add pks.clusters.manage k8s-admin
    success
    </pre>


##<a id='pks-login'></a> Log In to PKS 

1. To login to PKS as `pks-admin` run the following command:  

    ```
    pks login -a "api.pks.vsphere.local" -u "pks-admin" -p "PASSWORD" -k
    ```

    Where:
    * `PASSWORD` is the password for the user account.  

    For example:
    <pre class="terminal">
    $ pks login -a "api.pks.vsphere.local" -u "pks-admin" -p "aZ1by2cX3d4!" -k

    API Endpoint: api.pks.vsphere.local
    User: pks-admin
    Login successful.
    </pre>

1. To login to PKS as `k8s-admin` run the following command: 

    ```
    pks login -a "api.pks.vsphere.local" -u "k8s-admin" -p "PASSWORD" -k
    ```

    Where:  
    * `PASSWORD` is the password for the user account.

    For example:
    <pre class="terminal">
    $ pks login -a "api.pks.vsphere.local" -u "k8s-admin" -p "VMware1!" -k
    
    API Endpoint: api.comet.pks.local
    User: k8s-admin
    Login successful.
    </pre>

##<a id='bosh-verify'></a> Manage PKS Using BOSH

###<a id='bosh-alias'></a> Create a BOSH Alias 

1. To create a BOSH alias, complete one of the following:  
    * To create a BOSH alias using command line credentials, complete the following:  
        1. Go to BOSH Director tile > Credentials > Bosh Commandline Credentials.
        1. Copy the string `bosh_commandline_credentials`.  
        1. To create a Bash alias run the following command:

            ```
            alias bosh="BOSH_CLIENT=ops_manager BOSH\_CLIENT\_SECRET=BOSH-CLI-SECRET  
            BOSH\_CA\_CERT=ROOT-CERT-LOC 
            BOSH\_ENVIRONMENT=BOSH-CLI-IP bosh "  
            ```
            Where:
            * 
            * `BOSH-CLI-SECRET` is your secret from the BOSH command line credentials.  
            * `ROOT-CERT-LOC` is the Root CA Certificate path.  
            * `BOSH-CLI-IP` is the ip from the BOSH command line credentials.  

            For example:
            <pre class="terminal">
            $ alias bosh="BOSH\_CLIENT=ops\_manager BOSH\_CLIENT\_SECRET=sLa1it#ned^&erc! BOSH\_CA\_CERT=/var/tempest/workspaces/default/root\_ca\_certificate BOSH\_ENVIRONMENT=ip-from-bosh\_commandline\_credentials bosh "<br><pre>
    * To create a BOSH alias using `source`, complete the following:  
        1. Create a file named `bosh_evn.sh` with the following content: 

            ```
            export BOSH_CLIENT=ops_manager
            export BOSH_CLIENT_SECRET=BOSH-CLI-SECRET
            export BOSH_CA_CERT=/var/tempest/workspaces/default/root_ca_certificate
            export BOSH_ENVIRONMENT=IP-ADDRESS-OF-BOSH
            alias om=om-linux
            ```
  
            Where:  
            * `BOSH-CLI-SECRET` is your secret from the BOSH command line credentials.  
            * `ROOT-CERT-LOC` is the Root CA Certificate path.  
            * `IP-ADDRESS-OF-BOSH` is the BOSH IP Address.  
        1. Run the following command:  

            ```
            source bosh_env.sh
            ```

####<a id='bosh-deployments'></a> List BOSH Deployments 

1. To retrieve a list of BOSH deployments, run the following command:  

    ```
    bosh deployments
    ```

####<a id='bosh-vms'></a> List BOSH VMs 
1. To retrieve a list of BOSH VMs, run the following command:  

    ```
    bosh vms
    ```

####<a id='bosh-components'></a> List BOSH Components 
1. To retrieve a list of bosh components. run the following command:  

    ```
    bosh releases
    ```

####<a id='bosh-alias'></a> SSH to a Node 
1. To SSH to a Kubernetes node, run the following command:

    ```
    bosh ssh -d 'SERVICE-ID' OTHER-ID
    ```

    Where:
    * `SERVICE-ID` is your node's service instance id.  
    * `OTHER-ID` is  

    For example:
    <pre class="terminal">
    $ bosh ssh -d 'service-instance\_9dd62330-fcea-469f-a50d-27c746622662' master/b1f99643-6905-4427-a01c-c26fc9101d40
    </pre>

####<a id='bosh-delete'></a> Delete a Kubernetes Cluster 
This may be needed if a Kubernetes cluster fails to deploy, and you can't delete it using the PKS CLI.  

1. To delete a Kubernetes cluster, run the following command:  

    ```
    bosh -e pks delete-deployment -d SERVICE-ID
    ```

    Where `SERVICE-ID` is your node's service instance id.  
<br>
    For example:  
    <pre style="terminal">
    $bosh -e pks delete-deployment -d service-instance_3bd9069f-aafd-4525-a145-f3e48570c055
    </pre>

##<a id='k8s-creds'></a> Manage a Kubernetes Cluster using PKS and Kubernetes

####<a id='cluster-creds'></a> Retrieve Cluster Credentials

1. To retrieve your Kubernetes cluster credentials, run the following:  

    ```
    pks get-credentials CLUSTER-NAME
    ```

    Where `CLUSTER-NAME` is the name cluster.  

####<a id='k8s-config-file'></a> Validate the Kubernetes Configuration File 

1. To verify that the Kubernetes configuration file exists, run the following command:  

    ```
    ls -l ~/.kube/config
    ```

####<a id='k8s-list-nodes'></a> List Kubernetes Cluster Nodes

1. To list the cluster nodes of the currently connected Kubernetes cluster, run the following command:  

    ```
    kubectl get nodes
    ```

##<a id='k8s-creds'></a> Connect to Kubernetes Cluster 

1. Retrieve your Kubernetes cluster credentials. For more information, see [Retrieve Cluster Credentials](#cluster-creds) above.  
1. Verify that the Kubernetes configuration file exists. For more information, see [Validate the Kubernetes Configuration File](k8s-config-file) above.   
1. To create a DNS record for the Kubernetes cluster and master node IP address, complete the following steps:
    1. Run the following command to get the information:

        ```
        pks cluster CLUSTER-NAME
        ```

    1. Locate the "Kubernetes Master Host" and "Kubernetes Master IP(s)" values.
    1. To create a DNS record, create or modify the `/etc/hosts` file to have a new line using these values:

        ```
        MASTER-IP MASTER-HOST
        ```

        Where:
        * `MASTER-IP` is the Kubernetes Master IP(s) collected in the preceding step.
        * `MASTER-HOST` is the Kubernetes Master Host collected in the preceding step.

        For example:  
        <pre class="terminal">
        $ vi /etc/hosts

        10.197.100.130 tea-cluster
        </pre>

1. To connect to the Kubernetes cluster, run the following command:  

    ```
    kubectl config use-context CLUSTER-NAME
    ```

1. To confirm your connection list your cluster nodes. For more information see 
[List Kubernetes Cluster Nodes](#k8s-list-nodes) above.

##<a id='hello-world'></a> Deploy a Hello World Cluster 


##<a id='home'></a> NSX-T Installation Instructions 

For information about installing NSX-T, see 
[Installing and Configuring NSX-T for <%= vars.product_short %>](nsxt-install-config-steps.html).
